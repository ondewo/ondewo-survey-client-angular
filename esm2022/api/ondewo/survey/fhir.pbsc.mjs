/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
//
// THIS IS A GENERATED FILE
// DO NOT MODIFY IT! YOUR CHANGES WILL BE LOST
import { Inject, Injectable, Optional } from '@angular/core';
import { GrpcCallType, GrpcMetadata } from '@ngx-grpc/common';
import { GRPC_CLIENT_FACTORY, takeMessages, throwStatusErrors } from '@ngx-grpc/core';
import * as thisProto from './fhir.pb';
import * as ondewoSurvey005 from '../../ondewo/survey/survey.pb';
import { GRPC_FHIR_CLIENT_SETTINGS } from './fhir.pbconf';
import * as i0 from '@angular/core';
import * as i1 from '@ngx-grpc/core';
/**
 * Service client implementation for ondewo.survey.FHIR
 */
export class FHIRClient {
	constructor(settings, clientFactory, handler) {
		this.handler = handler;
		/**
		 * Raw RPC implementation for each service client method.
		 * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
		 * Attention: these methods do not throw errors when non-zero status codes are received.
		 */
		this.$raw = {
			/**
			 * Unary call: /ondewo.survey.FHIR/CreateFHIRSurvey
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<ondewoSurvey005.Survey>>
			 */
			createFHIRSurvey: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.survey.FHIR/CreateFHIRSurvey',
					requestData,
					requestMetadata,
					requestClass: thisProto.CreateFHIRSurveyRequest,
					responseClass: ondewoSurvey005.Survey
				});
			},
			/**
			 * Unary call: /ondewo.survey.FHIR/GetFHIRSurveyAnswers
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.SurveyFHIRAnswersResponse>>
			 */
			getFHIRSurveyAnswers: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.survey.FHIR/GetFHIRSurveyAnswers',
					requestData,
					requestMetadata,
					requestClass: ondewoSurvey005.GetSurveyAnswersRequest,
					responseClass: thisProto.SurveyFHIRAnswersResponse
				});
			},
			/**
			 * Unary call: /ondewo.survey.FHIR/GetAllFHIRSurveyAnswers
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.SurveyFHIRAnswersResponse>>
			 */
			getAllFHIRSurveyAnswers: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.survey.FHIR/GetAllFHIRSurveyAnswers',
					requestData,
					requestMetadata,
					requestClass: ondewoSurvey005.GetAllSurveyAnswersRequest,
					responseClass: thisProto.SurveyFHIRAnswersResponse
				});
			}
		};
		this.client = clientFactory.createClient('ondewo.survey.FHIR', settings);
	}
	/**
	 * Unary call @/ondewo.survey.FHIR/CreateFHIRSurvey
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<ondewoSurvey005.Survey>
	 */
	createFHIRSurvey(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.createFHIRSurvey(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.survey.FHIR/GetFHIRSurveyAnswers
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.SurveyFHIRAnswersResponse>
	 */
	getFHIRSurveyAnswers(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getFHIRSurveyAnswers(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.survey.FHIR/GetAllFHIRSurveyAnswers
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.SurveyFHIRAnswersResponse>
	 */
	getAllFHIRSurveyAnswers(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getAllFHIRSurveyAnswers(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	static {
		this.ɵfac = i0.ɵɵngDeclareFactory({
			minVersion: '12.0.0',
			version: '16.2.6',
			ngImport: i0,
			type: FHIRClient,
			deps: [
				{ token: GRPC_FHIR_CLIENT_SETTINGS, optional: true },
				{ token: GRPC_CLIENT_FACTORY },
				{ token: i1.GrpcHandler }
			],
			target: i0.ɵɵFactoryTarget.Injectable
		});
	}
	static {
		this.ɵprov = i0.ɵɵngDeclareInjectable({
			minVersion: '12.0.0',
			version: '16.2.6',
			ngImport: i0,
			type: FHIRClient,
			providedIn: 'any'
		});
	}
}
i0.ɵɵngDeclareClassMetadata({
	minVersion: '12.0.0',
	version: '16.2.6',
	ngImport: i0,
	type: FHIRClient,
	decorators: [
		{
			type: Injectable,
			args: [{ providedIn: 'any' }]
		}
	],
	ctorParameters: function () {
		return [
			{
				type: undefined,
				decorators: [
					{
						type: Optional
					},
					{
						type: Inject,
						args: [GRPC_FHIR_CLIENT_SETTINGS]
					}
				]
			},
			{
				type: undefined,
				decorators: [
					{
						type: Inject,
						args: [GRPC_CLIENT_FACTORY]
					}
				]
			},
			{ type: i1.GrpcHandler }
		];
	}
});
//# sourceMappingURL=data:application/json;base64,
